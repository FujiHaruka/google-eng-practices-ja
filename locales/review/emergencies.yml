texts:
  en: Emergencies
  ja: 緊急事態
---
texts:
  en: >-
    Sometimes there are emergency CLs that must pass through the entire code review

    process as quickly as

    possible.
  ja: 緊急の CL というものがときどきあります。緊急の CL は可能な限りすみやかにコードレビューの全プロセスを通過させる必要があります。
---
texts:
  en: What Is An Emergency? {#what}
  ja: 緊急事態とは何か？ {#what}
---
texts:
  en: >-
    An emergency CL would be a **small** change that: allows a major launch to

    continue instead of rolling back, fixes a bug significantly affecting users in

    production, handles a pressing legal issue, closes a major security hole, etc.
  ja: >-
    緊急の CL は**小さな**変更になるでしょう。たとえば、ローンチ済みの主要機能をロールバックするのではなく継続するための変更、本番環境のユーザーに重大な影響を与えるバグの修正、切迫した法的問題の対応、深刻なセキュリティホールの修正等です。
---
texts:
  en: >-
    In emergencies we really do care about the speed of the entire code review

    process, not just the [speed of response](reviewer/speed.md). In this case

    *only*, the reviewer should care more about the speed of the review and the

    correctness of the code (does it actually resolve the emergency?) than anything

    else. Also (perhaps obviously) such reviews should take priority over all other

    code reviews, when they come up.
  ja: >-
    緊急事態で私達が尽力するのはレビューの[応答の速さ](reviewer/speed.md)だけでなくコードレビューのプロセス全体の速度です。この場合に**限り**、レビュアーはすみやかにレビューすることとコードの正確さ (緊急事態を本当に解決しているだろうか？) に何よりも集中してください。また、(当然かもしれませんが) このレビュー依頼が来たら他のレビューよりも最優先で取り組んでください。
---
texts:
  en: >-
    However, after the emergency is resolved you should look over the emergency CLs

    again and give them a [more thorough review](reviewer/looking-for.md).
  ja: >-
    しかしながら、緊急事態が解決したあとは緊急の CL をもう一度見て、[全体的なレビュー](reviewer/looking-for.md)を再度行ってください。
---
texts:
  en: What Is Not An Emergency? {#not}
  ja: 緊急事態でないものは何か？ {#not}
---
texts:
  en: "To be clear, the following cases are *not* an emergency:"
  ja: はっきりさせるために、緊急事態**でない**ものを以下に挙げます。
---
texts:
  en: >-
    Wanting to launch this week rather than next week (unless there is some
        actual [hard deadline](#deadlines) for launch such as a partner agreement).
  ja: >-
    ローンチを来週から今週に早めたい (例外としてパートナーの同意のような[ハードな納期](#deadlines)が実際にある場合は別です)
---
texts:
  en: >-
    The developer has worked on a feature for a very long time and they really
        want to get the CL in.
  ja: >-
    開発者がある機能について非常に長期間にわたって作業しているため、CL をそろそろいい加減取り込んでほしい。
---
texts:
  en: >-
    The reviewers are all in another timezone where it is currently nighttime or
        they are away on an off-site.
  ja: >-
    レビュアーが皆、他のタイムゾーンにいて今は夜だったり現場にいなかったりする。
---
texts:
  en: >-
    It is the end of the day on a Friday and it would just be great to get this
        CL in before the developer leaves for the weekend.
  ja: >-
    今が金曜日の終業間際で、開発者が週末に去る前にこの CL を取り込んでもらえると素敵だ
---
texts:
  en: >-
    A manager says that this review has to be complete and the CL checked in
        today because of a [soft (not hard) deadline](#deadlines).
  ja: >-
    マネージャーが [(ハードでなく) ソフトな納期](#deadlines)のためにこのレビューを今日中に完了させて CL を取り入れなければならないと言っている
---
texts:
  en: Rolling back a CL that is causing test failures or build breakages.
  ja: テストの失敗やビルドの破壊を引き起こしている CL のロールバック
---
texts:
  en: And so on.
  ja: ""
---
texts:
  en: What Is a Hard Deadline? {#deadlines}
  ja: ハードな納期とは何か？ {#deadlines}
---
texts:
  en: >-
    A hard deadline is one where **something disastrous would happen** if you miss

    it. For example:
  ja: ハードな納期とはそれを逃すと**大きな損害が発生する**納期のことです。たとえば以下のようなものです。
---
texts:
  en: >-
    Submitting your CL by a certain date is necessary for a contractual
        obligation.
  ja: 契約上の義務からある期日までに CL を提出する必要がある。
---
texts:
  en: >-
    Your product will completely fail in the marketplace if not released by a
        certain date.
  ja: ある期日までにリリースしなければそのプロダクトが市場で完全に乗り遅れてしまう。
---
texts:
  en: >-
    Some hardware manufacturers only ship new hardware once a year. If you miss
        the deadline to submit code to them, that could be disastrous, depending on
        what type of code you’re trying to ship.
  ja: あるハードウェアメーカーは新しいハードウェアを年に一度しかリリースしない。納期までにコードを提出しないと、リリースしようとしているコードの種類によっては大きな損害が発生する。
---
texts:
  en: >-
    Delaying a release for a week is not disastrous. Missing an important conference

    might be disastrous, but often is not.
  ja: "リリースが一週間遅れても大きな損害にはなりません。重要なカンファレンスを逃すと損害が大きくなるかもしれませんが、とはいえ頻繁に起こるケースではありません。"
---
texts:
  en: >-
    Most deadlines are soft deadlines, not hard deadlines. They represent a desire

    for a feature to be done by a certain time. They are important, but you

    shouldn’t be sacrificing code health to make them.
  ja: ほとんどの納期はソフトな納期であって、ハードな納期ではありません。ある機能が期日までに実装されてほしいという願望を述べているだけです。それは重要ではありますが、そのためにコードの健康状態を犠牲にすべきではありません。
---
texts:
  en: >-
    If you have a long release cycle (several weeks) it can be tempting to sacrifice

    code review quality to get a feature in before the next cycle. However, this

    pattern, if repeated, is a common way for projects to build up overwhelming

    technical debt. If developers are routinely submitting CLs near the end of the

    cycle that "must get in" with only superficial review, then the team should

    modify its process so that large feature changes happen early in the cycle and

    have enough time for good review.
  ja: リリースサイクルが数週間にわたる長い期間だったりすると、次のサイクルに入る前にコードレビューの品質を犠牲にしてまである機能を取り入れてしまいたいという誘惑があることがあります。けれども、このパターンが繰り返されると、プロジェクト技術的負債があるとき噴出することになります。開発者が CL をリリースサイクルの終盤に提出し、表面をなぞるだけのレビューで CL を「取り入れなければならない」といったことが習慣的に行われているなら、チームは開発プロセスを見直すべきです。大きな機能変更はリリースサイクルの初期に提出し、きちんとレビューするための時間を十分に確保できるようにしてください。
