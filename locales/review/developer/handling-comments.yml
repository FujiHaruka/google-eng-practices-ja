texts:
  en: How to handle reviewer comments
  ja: レビューコメントの対応の仕方
---
texts:
  en: >-
    When you've sent a CL out for review, it's likely that your reviewer will

    respond with several comments on your CL. Here are some useful things to know

    about handling reviewer comments.
  ja: >-
    CL をレビューに送ると、レビュアーが CL にいくつかのコメントを残してくれます。ここではレビュアーのコメントに対応するときに知っておくと有益なポイントを紹介します。
---
texts:
  en: Don't Take it Personally {#personal}
  ja: 個人の人格へのコメントとして受け取らない {#personal}
---
texts:
  en: >-
    The goal of review is to maintain the quality of our codebase and our products.

    When a reviewer provides a critique of your code, think of it as their attempt

    to help you, the codebase, and Google, rather than as a personal attack on you

    or your abilities.
  ja: >-
    レビューの目的は私達のコードベースと私達のプロダクトの品質を維持することです。レビュアーがあなたのコードに苦言を呈したら、それを個人攻撃とかあなたの能力をくさしているとか受け取らずに、レビュアーがあなたを手助けしようとしていると考えてみてください。レビュアーはコードベースを、また Google を良くしようとしているのです。
---
texts:
  en: >-
    Sometimes reviewers feel frustrated and they express that frustration in their

    comments. This isn't a good practice for reviewers, but as a developer you

    should be prepared for this. Ask yourself, "What is the constructive thing that

    the reviewer is trying to communicate to me?" and then operate as though that's

    what they actually said.
  ja: >-
    ときにはレビュアーが苛立って、そのイライラをコメントに表現することもあります。これはレビュアーとして褒められた行いではありませんが、開発者としてはこうしたことへの心構えをしましょう。ご自分にこう問いかけてください。「レビュアーが私に伝えようとしている建設的な事柄は何だろう？」と。そして、それがレビュアーの真意だと捉えてください。
---
texts:
  en: >-
    **Never respond in anger to code review comments.** That is a serious breach of

    professional etiquette that will live forever in the code review tool. If you

    are too angry or annoyed to respond kindly, then walk away from your computer

    for a while, or work on something else until you feel calm enough to reply

    politely.
  ja: >-
    **コードレビューコメントに対して怒りに任せて反応しないでください。**怒りに任せたコメントはプロとしての礼儀作法に違反しますし、それがコードレビューツールに永遠に残ることになります。もしあなたが怒りや苛立ちで丁重に応答できなくなっていれば、しばらく席を立って歩いたり他の作業に当たったりして、気持ちが落ち着いて丁重な応答ができるようになるのを待ってください。
---
texts:
  en: >-
    In general, if a reviewer isn't providing feedback in a way that's constructive

    and polite, explain this to them in person. If you can't talk to them in person

    or on a video call, then send them a private email. Explain to them in a kind

    way what you don't like and what you'd like them to do differently. If they also

    respond in a non-constructive way to this private discussion, or it doesn't have

    the intended effect, then

    escalate to your manager as

    appropriate.
  ja: >-
    一般に、レビュアーが建設的で礼儀正しい言い方でフィードバックをしてくれない場合、そのことを対面で伝えましょう。対面やビデオ通話で会話する機会が持てなければ、個人的なメールを送りましょう。レビュアーの言い方のどこが嫌でどんなふうに変えてほしいのかを丁重に説明してください。この個人的な会話でもレビュアーが非建設的な言い方で応酬するようなら、あるいは態度が全く変わらないようなら、上司に相談するのが適切です。
---
texts:
  en: Fix the Code {#code}
  ja: コードを修正する {#code}
---
texts:
  en: >-
    If a reviewer says that they don't understand something in your code, your first

    response should be to clarify the code itself. If the code can't be clarified,

    add a code comment that explains why the code is there. If a comment seems

    pointless, only then should your response be an explanation in the code review

    tool.
  ja: >-
    レビュアーがあなたのコードに理解できない箇所があると言うなら、最初に行うべきはコード自体を明確にすることです。コードを明確にできないなら、なぜそのコードがそこにあるのか理由を書いたコメントをコードに追加してください。コメントの追加では足りない場合に限り、コードレビューツール上で説明してください。
---
texts:
  en: >-
    If a reviewer didn't understand some piece of your code, it's likely other

    future readers of the code won't understand either. Writing a response in the

    code review tool doesn't help future code readers, but clarifying your code or

    adding code comments does help them.
  ja: >-
    レビュアーがあなたのコードを理解できなければ、将来コードを読む人も理解できない可能性が高いです。コードレビューツール上で説明しても将来コードを読む人には役立ちませんが、コード自体を整理したりコードにコメントを追加したりすれば、将来コードを読むにも役立ちます。
---
texts:
  en: Think for Yourself {#think}
  ja: 自分で考える {#think}
---
texts:
  en: >-
    Writing a CL can take a lot of work. It's often really satisfying to finally

    send one out for review, feel like it's done, and be pretty sure that no further

    work is needed. So when a reviewer comes back with comments on things that could

    be improved, it's easy to reflexively think the comments are wrong, the reviewer

    is blocking you unnecessarily, or they should just let you submit the CL.

    However, **no matter how certain you are** at this point, take a moment to step

    back and consider if the reviewer is providing valuable feedback that will help

    the codebase and Google. Your first question to yourself should always be, "Is

    the reviewer correct?"
  ja: >-
    CL を書くのは大きな労力が伴います。CL をレビューに送り出すとすっかり満足して、これで仕事が完了したと感じ、これ以上作業が必要ないと思い込んでしまうことがよくあります。そうなるとレビュアーが改善点についてコメントを返しても、コメントのほうが間違っていて、レビュアーがあなたを不必要にブロックしているとか、つべこべ言わずに CL を取り込んでくれればいいのにとか反射的に考えてしまいやすいものです。けれども、そのときに**どれだけ自分が正しいと確信していたとしても**、少し立ち止まって、レビュアーがコードベースと Google を良くする価値あるフィードバックを書いているのではないかと考えてみてください。常日頃から「レビュアーが正しいのではないか？」と自問自答してください。
---
texts:
  en: >-
    If you can't answer that question, it's likely the reviewer needs to clarify

    their comments.
  ja: その問いに答えを出せないとしたら、レビュアーのコメントがわかりにくいのが原因と考えられるので、レビュアーがもっと明解に書く必要があります。
---
texts:
  en: >-
    If you *have* considered it and you still think you're right, feel free to

    respond with an explanation of why your method of doing things is better for the

    codebase, users, and/or Google. Often, reviewers are actually providing

    *suggestions* and they want you to think for yourself about what's best. You

    might actually know something about the users, codebase, or CL that the reviewer

    doesn't know. So fill them in; give them more context. Usually you can come to

    some consensus between yourself and the reviewer based on technical facts.
  ja: >-
    その問いを**考えた**上でなお自分が正しいと思えるなら、あなたのやり方のほうがコードベースにとってもユーザーにとっても、また Google にとっても良いといえる理由を気兼ねなく説明してください。レビュアーは実際には**提案**をしていて、何が最良なのかは開発者自身に考えてほしいと思っていることがよくあります。開発者はユーザーについて、コードベースについて、CL についてレビュアーの知らないことを知っていることもあります。そういうときには知識のギャップを埋めてください。レビュアーにコンテキストをもっと与えてください。技術的な事実に基づいて開発者とレビュアーの間で一定のコンセンサスに達することができるでしょう。
---
texts:
  en: Resolving Conflicts {#conflicts}
  ja: 意見の対立を解消する {#conflicts}
---
texts:
  en: >-
    Your first step in resolving conflicts should always be to try to come to

    consensus with your reviewer. If you can't achieve consensus, see

    [The Standard of Code Review](../reviewer/standard.md), which gives principles

    to follow in such a situation.
  ja: >-
    意見の対立を解消するためにまず行うべきはレビュアーとコンセンサスを得られるよう試みることです。コンセンサスに達することができない場合、[コードレビューの基準](../reviewer/standard.md)にそういった状況で対応する際の原則があるので参考にしてください。
