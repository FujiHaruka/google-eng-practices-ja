texts:
  en: Writing good CL descriptions
  ja: 適切な CL のディスクリプションを書く
---
texts:
  en: >-
    A CL description is a public record of **what** change is being made and **why**

    it was made. It will become a permanent part of our version control history, and

    will possibly be read by hundreds of people other than your reviewers over the

    years.
  ja: CL のディスクリプションは**何**が変更され、**なぜ**変更されたのかを説明する公式記録です。この記録はバージョン管理の履歴に永続的に残され、長期にわたって読まれます。レビュアー以外にも数百人もの人が読むこともあります。
---
texts:
  en: >-
    Future developers will search for your CL based on its description. Someone in

    the future might be looking for your change because of a faint memory of its

    relevance but without the specifics handy. If all the important information is

    in the code and not the description, it's going to be a lot harder for them to

    locate your CL.
  ja: 将来の開発者はあなたの CL をディスクリプションに基づいて検索します。将来の誰かがあなたの作成した変更を見つけようとして、詳細は忘れているけれどもその変更に関するおぼろげな記憶を頼りに検索するかもしれません。重要な情報がすべてコードにあってディスクリプションに記載されていないと、お目当ての CL を探し出すのが非常に難しくなるでしょう。
---
texts:
  en: First Line {#firstline}
  ja: 一行目 {#firstline}
---
texts:
  en: Short summary of what is being done.
  ja: 何を行っているのかを短く要約する
---
texts:
  en: Complete sentence, written as though it was an order.
  ja: 完全な文で、命令のように書く
---
texts:
  en: Follow by empty line.
  ja: 次の行は空行にする
---
texts:
  en: >-
    The **first line** of a CL description should be a short summary of

    *specifically* **what** *is being done by the CL*, followed by a blank line.

    This is what most future code searchers will see when they are browsing the

    version control history of a piece of code, so this first line should be

    informative enough that they don't have to read your CL or its whole description

    just to get a general idea of what your CL actually *did*.
  ja: CL の**一行目**には、その CL が**何**を行っているのかを明確に記した短い要約を書いてください。二行目は空行にしてください。将来コードを検索する人はコードのバージョン管理履歴を拾い読みするのにまずこの箇所を読むことになります。そのときにあなたの CL が何を**した**のか概要をつかむために CL のコードやディスクリプション全体を読まなくて済むように、一行目にしっかりと有益な情報を盛り込んでください。
---
texts:
  en: >-
    By tradition, the first line of a CL description is a complete sentence, written

    as though it were an order (an imperative sentence). For example, say

    \"**Delete** the FizzBuzz RPC and **replace** it with the new system." instead

    of \"**Deleting** the FizzBuzz RPC and **replacing** it with the new system."

    You don't have to write the rest of the description as an imperative sentence,

    though.
  ja: 伝統的に、CL のディスクリプションの一行目は完全な文で、命令のように (命令形で) 書きます。たとえば、「**Deleting** the FizzBuzz RPC and **replacing** it with the new system.」と書くのではなく「**Delete** the FizzBuzz RPC and **replace** it with the new system.」と書きます。もっとも、ディスクリプションの他の部分まで命令形で書く必要はありません。
---
texts:
  en: Body is Informative {#informative}
  ja: 主要部に有益な情報を盛り込む {#informative}
---
texts:
  en: >-
    The rest of the description should be informative. It might include a brief

    description of the problem that's being solved, and why this is the best

    approach. If there are any shortcomings to the approach, they should be

    mentioned. If relevant, include background information such as bug numbers,

    benchmark results, and links to design documents.
  ja: 二行目以降のディスクリプションには有益な情報を盛り込んでください。解決されている問題に関する短いディスクリプションを書くこともありますし、どうしてこれが最良の方法なのかを説明することもあります。その方法に欠陥があれば、そのことにも言及してください。また関連があれば、バグ番号やベンチマーク結果、設計ドキュメントのリンク等の背景も書いてください。
---
texts:
  en: Even small CLs deserve a little attention to detail. Put the CL in context.
  ja: 小さな CL であっても詳細に書くよう心がける価値があります。CL をコンテキストの中に位置付けてください。
---
texts:
  en: Bad CL Descriptions {#bad}
  ja: CL ディスクリプションの悪い例 {#bad}
---
texts:
  en: >-
    "Fix bug" is an inadequate CL description. What bug? What did you do to fix it?

    Other similarly bad descriptions include:
  ja: 「Fix bug」とだけ書いた CL ディスクリプションは情報量不足です。どんなバグでしょうか？バグを修正するために何をしたのでしょうか？他にも悪いディスクリプションの例を以下に示します。
---
texts:
  en: '"Fix build."'
  ja: __COPY__
---
texts:
  en: '"Add patch."'
  ja: __COPY__
---
texts:
  en: '"Moving code from A to B."'
  ja: __COPY__
---
texts:
  en: '"Phase 1."'
  ja: __COPY__
---
texts:
  en: '"Add convenience functions."'
  ja: __COPY__
---
texts:
  en: '"kill weird URLs."'
  ja: __COPY__
---
texts:
  en: >-
    Some of those are real CL descriptions. Their authors may believe they are

    providing useful information, but they are not serving the purpose of a CL

    description.
  ja: いくつかのものは実際にあった CL ディスクリプションです。作成者は有益な情報を提供していると思っているかもしれませんが、上の例は CL ディスクリプションの目的を果たせていません。
---
texts:
  en: Good CL Descriptions {#good}
  ja: 適切な CL ディスクリプションの例 {#good}
---
texts:
  en: Here are some examples of good descriptions.
  ja: 以下は適切なディスクリプションの例です。
---
texts:
  en: Functionality change
  ja: 機能変更
---
texts:
  en: "rpc: remove size limit on RPC server message freelist."
  ja: "rpc: RPC サーバーのメッセージフリーリストのサイズ制限を取り除く。(訳注: 英語では命令形)"
---
texts:
  en: >-
    Servers like FizzBuzz have very large messages and would benefit from reuse.
      Make the freelist larger, and add a goroutine that frees the freelist entries
      slowly over time, so that idle servers eventually release all freelist
      entries.
  ja: "FizzBuzz のようなサーバーには巨大なメッセージがあり、再利用することでメリットがある。フリーリストを大きくし、徐々にフリーリストエントリーを解放する goroutine を追加することで、アイドリング中のサーバーが最終的にすべてのフリーリストエントリーを解放するようにした。"
---
texts:
  en: >-
    The first few words describe what the CL actually does. The rest of the

    description talks about the problem being solved, why this is a good solution,

    and a bit more information about the specific implementation.
  ja: "最初の文で CL が実際に何をするのかを説明しています。以降のディスクリプションでは、解決される問題となぜこれが適切な解決なのか、また特定の実装に関する付加情報を記述しています。"
---
texts:
  en: Refactoring
  ja: リファクタリング
---
texts:
  en: Construct a Task with a TimeKeeper to use its TimeStr and Now methods.
  ja: "TimeStr と Now メソッドを使用するため Task を TimeKeeper と一緒に初期化する。(訳注: 英語では命令形)"
---
texts:
  en: >-
    Add a Now method to Task, so the borglet() getter method can be removed (which
      was only used by OOMCandidate to call borglet's Now method). This replaces the
      methods on Borglet that delegate to a TimeKeeper.
  ja: Task に Now メソッドを追加することで、borglet() getter method を除去できるようにする (これは OOMCandidate が borglet の Now メソッドを呼び出すために使うだけだった)。これは TimeKeeper に委譲する Borglet のメソッドを置き換える。
---
texts:
  en: >-
    Allowing Tasks to supply Now is a step toward eliminating the dependency on
      Borglet. Eventually, collaborators that depend on getting Now from the Task
      should be changed to use a TimeKeeper directly, but this has been an
      accommodation to refactoring in small steps.
  ja: Task に Now を与えられるようにするのは Borglet への依存をなくすための一ステップである。最終的には Task から Now を取得することに依存している部分は TimeKeeper を直接使うように変更すべきだが、これはスモールステップでリファクタリングするための調整である。
---
texts:
  en: Continuing the long-range goal of refactoring the Borglet Hierarchy.
  ja: Borglet の階層構造をリファクタリングする長丁場のゴールに向けて引き続き作業する。
---
texts:
  en: >-
    The first line describes what the CL does and how this is a change from the

    past. The rest of the description talks about the specific implementation, the

    context of the CL, that the solution isn't ideal, and possible future direction.

    It also explains *why* this change is being made.
  ja: >-
    一行目は CL が何をするのかとどのような変更なのかを説明しています。以降のディスクリプションでは特定の実装と CL のコンテキストを説明しています。CL のソリューションは理想的ではないものの将来の方向性を示しています。またこの説明では**なぜ**この変更が行われるのかにも言及しています。
---
texts:
  en: Small CL that needs some context
  ja: コンテキストの説明が必要な小さな CL
---
texts:
  en: Create a Python3 build rule for status.py.
  ja: "status.py の Python3 ビルドルールを作成する (訳注: 英語では命令形)"
---
texts:
  en: >-
    This allows consumers who are already using this as in Python3 to depend on a
      rule that is next to the original status build rule instead of somewhere in
      their own tree. It encourages new consumers to use Python3 if they can,
      instead of Python2, and significantly simplifies some automated build file
      refactoring tools being worked on currently.
  ja: これにより、Python3 ですでにそうしているようにこれを使用しているユーザーが自分の tree の中を探さなくても規定の status ビルドルールの隣のルールに依存できるようになる。そのことで新しいユーザーには可能なら Python2 ではなく Python3 を使用するよう促し、現在作業中の自動化されたビルドファイルのリファクタリングツールが有意に単純化される。
---
texts:
  en: >-
    The first sentence describes what's actually being done. The rest of the

    description explains *why* the change is being made and gives the reviewer a lot

    of context.
  ja: 一文目は何が実際に行われているのかを説明しています。以降のディスクリプションでは**なぜ**その変更が行われるのかを説明し、レビュアーに十分なコンテキストを提供しています。
---
texts:
  en: Review the description before submitting the CL
  ja: CL を提出する前にディスクリプションをレビューする
---
texts:
  en: >-
    CLs can undergo significant change during review. It can be worthwhile to review

    a CL description before submitting the CL, to ensure that the description still

    reflects what the CL does.
  ja: CL はレビューの間、重要な変更を被ることがあります。CL を提出する前に CL ディスクリプションをレビューするのが有意義な場合があります。それはディスクリプションが CL の内容を正しく反映してることを確認するためです。
---
texts:
  en: "Next: [Small CLs](small-cls.md)"
  ja: "次: [小さな CL](small-cls.md)"
