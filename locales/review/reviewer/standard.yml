texts:
  en: The Standard of Code Review
  ja: コードレビューの基準
---
texts:
  en: >-
    The primary purpose of code review is to make sure that the overall

    code health of Google's code

    base is improving over time. All of the tools and processes of code review are

    designed to this end.
  ja: >-
    コードレビューの主な目的は、Google のコードベースが全体として健全であるようにし、また時間とともに改善することを保証することです。

    コードレビューのすべてのツールとプロセスは、その目的のために設計されています。
---
texts:
  en: In order to accomplish this, a series of trade-offs have to be balanced.
  ja: これを実現するため、さまざまなトレードオフがバランスを取る必要があります。
---
texts:
  en: >-
    First, developers must be able to _make progress_ on their tasks. If you never

    submit an improvement to the codebase, then the codebase never improves. Also,

    if a reviewer makes it very difficult for _any_ change to go in, then developers

    are disincentivized to make improvements in the future.
  ja: >-
    まず、開発者は自分のタスクを**進める**ことができなければなりません。

    コードベースに改善を提出できなければ、コードベースは改善しません。

    また、レビュアーが**どんな**変更でもそれを取り入れるを非常に困難にしている場合、開発者は将来の改善を行う意欲を失います。
---
texts:
  en: >-
    On the other hand, it is the duty of the reviewer to make sure that each CL is

    of such a quality that the overall code health of their codebase is not

    decreasing as time goes on. This can be tricky, because often, codebases degrade

    through small decreases in code health over time, especially when a team is

    under significant time constraints and they feel that they have to take

    shortcuts in order to accomplish their goals.
  ja: >-
    一方、CL の品質が、コードベース全体のコードの健全性を時間とともに減少させるようなものではないということを確認するのはレビュアーの責任です。

    これは骨の折れるやっかいな仕事になることがあります。

    というのも多くの場合、時間の経過とともにコードの健全性を小さく減少させる要因が重なり、コードベースの品質は下がっていきます。

    特に、チームが無視できない時間的制約のもとにあり、チームがゴールを達成するためにショートカットをしなければならないと感じているときには、コードベースの品質は下がりやすいのです。
---
texts:
  en: >-
    Also, a reviewer has ownership and responsibility over the code they are

    reviewing. They want to ensure that the codebase stays consistent, maintainable,

    and all of the other things mentioned in

    ["What to look for in a code review."](looking-for.md)
  ja: >-
    また、レビュアーにはレビューしているコードに対して所有権と責任があります。

    レビュアーはコードベースの一貫性と保守可能性を維持し、[「コードレビューで求めるものは何か」](looking-for.md)で言及されている事柄が守られるように保証したいと考えています。
---
texts:
  en: "Thus, we get the following rule as the standard we expect in code reviews:"
  ja: "そのため、私達はコードレビューにおいて期待する基準として、次のルールを見出しました。"
---
texts:
  en: >-
    **In general, reviewers should favor approving a CL once it is in a state where

    it definitely improves the overall

    code health of the system

    being worked on, even if the CL isn't perfect.**
  ja: >-
    **一般に、CL が完璧でなくても、その変更が作業中のシステムの全体的なコードの健全性を間違いなく改善するとわかれば、レビュアーは CL を積極的に承認すべきである。**
---
texts:
  en: That is _the_ senior principle among all of the code review guidelines.
  ja: これはすべてのコードレビューガイドラインの中で**最上位の**原則です。
---
texts:
  en: >-
    There are limitations to this, of course. For example, if a CL adds a feature

    that the reviewer doesn't want in their system, then the reviewer can certainly

    deny approval even if the code is well-designed.
  ja: >-
    もちろん、このルールに制限はあります。たとえば、CL がシステムにレビュアーが望んでいない機能を追加している場合、コードがうまく設計されてるとしてもレビュアーは承認を拒否することができます。
---
texts:
  en: A key point here is that there is no such thing as "perfect" code
  ja: "ここでのポイントは、「完璧な」コードといったものは存在しないということです"
---
texts:
  en: —
  ja: __COPY__
---
texts:
  en: >-
    there is

    only _better_ code. Reviewers should not require the author to polish every tiny

    piece of a CL before granting approval. Rather, the reviewer should balance out

    the need to make forward progress compared to the importance of the changes they

    are suggesting. Instead of seeking perfection, what a reviewer should seek is

    _continuous improvement_. A CL that, as a whole, improves the maintainability,

    readability, and understandability of the system shouldn't be delayed for days

    or weeks because it isn't "perfect."
  ja: >-
    あるのは**より良い**コードだけです。

    レビュアーは CL を承認する前にコードのすみずみまで磨きをかけることを作成者に要求すべきではありません。

    むしろ、前に進めるべきかどうかの必要性を、CL 作成者が提案している変更の重要性と比較して、レビュアーはバランスよく検討すべきです。

    レビュアーが追求すべきは、完璧さではなく**継続的な改善**です。

    CL が全体としてシステムの保守性、可読性、理解可能性を向上させるのなら、それが「完璧」でないからといって数日も数週間も遅らせるべきではありません。
---
texts:
  en: >-
    Reviewers should _always_ feel free to leave comments expressing that something

    could be better, but if it's not very important, prefix it with something like

    "Nit: " to let the author know that it's just a point of polish that they could

    choose to ignore.
  ja: >-
    レビュアーは何か改善できそうな点を見つけたら、コメントを残すのに躊躇する必要はありません。

    **いつでも**気軽にコメントを残すべきです。

    その際に、もし重要でない指摘であれば、「Nit: 」（あら探しという意味）のようなプレフィックスを付けて、

    CL 作成者にこれはただ磨きをかけるための指摘なので無視してもらっても構わない、と知らせると良いでしょう。
---
texts:
  en: >-
    Note: Nothing in this document justifies checking in CLs that definitely

    _worsen_ the overall code health of the system. The only time you would do that

    would be in an [emergency](../emergencies.md).
  ja: >-
    （注）このドキュメントは、システムのコード全体の健全性を**悪化**させるとわかりきっている CL を正当化しません。

    唯一それが許されるケースは、[緊急事態](../emergencies.md)にあります。
---
texts:
  en: Mentoring
  ja: メンタリング
---
texts:
  en: >-
    Code review can have an important function of teaching developers something new

    about a language, a framework, or general software design principles. It's

    always fine to leave comments that help a developer learn something new. Sharing

    knowledge is part of improving the code health of a system over time. Just keep

    in mind that if your comment is purely educational, but not critical to meeting

    the standards described in this document, prefix it with "Nit: " or otherwise

    indicate that it's not mandatory for the author to resolve it in this CL.
  ja: >-
    コードレビューは、開発者に言語、フレームワーク、あるいはソフトウェア設計の一般的な原則に関して新しいことを教える重要な機会になります。

    開発者が新しいことを学ぶヒントになるコメントは、いつでも歓迎されます。

    知識の共有は、時間をかけてシステムのコードの健全性を改善する試みの一部分です。

    一点だけ頭に入れていただきたいのは、コメントが純粋に教育目的であって、このドキュメントで説明している基準を満たす上で重要でなければ、「Nit: 」などのプレフィックスを付けるか、この CL で作成者が解決する義務はないと付け加えてください。
---
texts:
  en: Principles {#principles}
  ja: 原則 {#principles}
---
texts:
  en: Technical facts and data overrule opinions and personal preferences.
  ja: 技術的な事実とデータが個人的な意見と好みをくつがえす。
---
texts:
  en: >-
    On matters of style, the [style guide](http://google.github.io/styleguide/)
        is the absolute authority. Any purely style point (whitespace, etc.) that is
        not in the style guide is a matter of personal preference. The style should
        be consistent with what is there. If there is no previous style, accept the
        author's.
  ja: "スタイルに関しては、[スタイルガイド](http://google.github.io/styleguide/)が絶対的な権威である。スタイルガイドの記載のない純粋なスタイルの選択（空白をどうするかなど）は個人の好みの問題である。スタイルはシステム内で一貫している必要がある。スタイルの選択に前例がなければ、CL 作成者のやり方を受けれるべきである。"
---
texts:
  en: >-
    **Aspects of software design are almost never a pure style issue or just a
        personal preference.** They are based on underlying principles and should be
        weighed on those principles, not simply by personal opinion. Sometimes there
        are a few valid options. If the author can demonstrate (either through data
        or based on solid engineering principles) that several approaches are
        equally valid, then the reviewer should accept the preference of the author.
        Otherwise the choice is dictated by standard principles of software design.
  ja: "ソフトウェア設計に関する論点は純粋なスタイルの問題でもなければ個人的な好みの問題でもない。それは基本的な原則に基づいており、ただの個人的な意見によるのではなく、その原則に重点を置くべきである。有効な選択肢がいくつかある場合がある。複数の方法が同等に有効であると作成者が（データを示したり堅固な工学原理に基づいて説明したりして）証明できるとき、レビュアーは作成者の選好を受け入れるべきである。そうでない場合、選択はソフトウェア設計の標準的な原則によって決定される。"
---
texts:
  en: >-
    If no other rule applies, then the reviewer may ask the author to be
        consistent with what is in the current codebase, as long as that doesn't
        worsen the overall code health of the system.
  ja: "他のルールが適用されない場合、システムのコード全体の健全性を悪化させない限りは、レビュアーは CL 作成者に現在のコードベースとの一貫性を維持するよう求めることができる。"
---
texts:
  en: Resolving Conflicts {#conflicts}
  ja: コンフリクトの解決 {#conflicts}
---
texts:
  en: >-
    In any conflict on a code review, the first step should always be for the

    developer and reviewer to try to come to consensus, based on the contents of

    this document and the other documents in [The CL Author's Guide](../developer/)

    and this [Reviewer Guide](index.md).
  ja: >-
    コードレビューでコンフリクトがあれば、最初のステップで必ず行うべきは、このドキュメントと[CL 作成者のガイド](../developer/)、またこの[レビュアーガイド](index.md)の他のドキュメントに基づいて、開発者とレビュアーの間でコンセンサスが得られるように試みることです。
---
texts:
  en: >-
    When coming to consensus becomes especially difficult, it can help to have a

    face-to-face meeting or a VC between the reviewer and the author, instead of

    just trying to resolve the conflict through code review comments. (If you do

    this, though, make sure to record the results of the discussion in a comment on

    the CL, for future readers.)
  ja: >-
    コンセンサスを得るのが特に難しいときには、レビュアーと作成者で対面でのミーティングやテレビ会議をもつほうが、コードレビューコメントのやり取りだけでコンフリクトを解消しようとするよりも効果があることがあります。

    （このやり方の場合、未来の読者のために CL のコメントにディスカッションの結果を記録するのを忘れないでください。）
---
texts:
  en: >-
    If that doesn't resolve the situation, the most common way to resolve it would

    be to escalate. Often the

    escalation path is to a broader team discussion, having a TL weigh in, asking

    for a decision from a maintainer of the code, or asking an Eng Manager to help

    out. **Don't let a CL sit around because the author and the reviewer can't come

    to an agreement.**
  ja: >-
    それでも状況が変わらない場合、通例では、巻き込む人を増やすのが解決する方法です。

    より広範にチーム内で議論したり、TL に検討してもらったり、コードのメンテナーに決めてもらうようお願いしたり、技術マネージャーに助力を求めたりできます。

    **作成者とレビュアーが合意に達することができないからといって、CL をそのまま放置しないでください。**
---
texts:
  en: "Next: [What to look for in a code review](looking-for.md)"
  ja: "次: [コードレビューで求めるものは何か](looking-for.md)"
