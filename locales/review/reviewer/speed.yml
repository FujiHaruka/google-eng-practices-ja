texts:
  en: Speed of Code Reviews
  ja: コードレビューのスピード
---
texts:
  en: Why Should Code Reviews Be Fast? {#why}
  ja: なぜコードレビューは素早く行うべきか？ {#why}
---
texts:
  en: >-
    **At Google, we optimize for the speed at which a team of developers can produce

    a product together**, as opposed to optimizing for the speed at which an

    individual developer can write code. The speed of individual development is

    important, it's just not _as_ important as the velocity of the entire team.
  ja: >-
    **Google では開発者のチームが協力してプロダクトを高速に開発するために最適化しており**、開発者個人がコードを高速に書くための最適化はしません。

    開発者個人のスピードは確かに重要ですが、チーム全体のスピードと比べると**同等の**重要性があるわけではありません。
---
texts:
  en: "When code reviews are slow, several things happen:"
  ja: コードレビューが遅滞するとさまざまなことが起こります。
---
texts:
  en: >-
    **The velocity of the team as a whole is decreased.** Yes, the individual,
        who doesn't respond quickly to the review, gets other work done. However,
        new features and bug fixes for the rest of the team are delayed by days,
        weeks, or months as each CL waits for review and re-review.
  ja: >-
    **チーム全体の開発速度が減少します。**もちろん、レビューに素早く反応しなくても個人としては他の仕事を終わらせられます。

    けれども、チームの他のメンバーが書いた新機能や不具合修正は、CL がレビュー待ち、再レビュー待ちになると何日も何週間も送れることになります。
---
texts:
  en: >-
    **Developers start to protest the code review process.** If a reviewer only
        responds every few days, but requests major changes to the CL each time,
        that can be frustrating and difficult for developers. Often, this is
        expressed as complaints about how "strict" the reviewer is being. If the
        reviewer requests the _same_ substantial changes (changes which really do
        improve code health) but responds _quickly_ every time the developer makes
        an update, the complaints tend to disappear. **Most complaints about the
        code review process are actually resolved by making the process faster.**
  ja: >-
    **開発者がコードレビューのプロセスに不満を持ち始めます。**

    レビュアーが数日おきにしか返信しないのに毎回 CL への大きな変更が要求されると、開発者はストレスをためるし開発が困難になります。

    よくあることですが、このようなときに表現される不満は、レビュアーが「厳しすぎる」というものです。

    本質的には**同じ**変更（実際にコードの健康状態を良くする変更）でも開発者の更新に応じてレビュアーが毎回**素早く**返信すれば、このような不満は薄れます。

    **コードレビューに関する不満はたいていの場合、プロセスをテンポ良く進めるだけで解消します。**
---
texts:
  en: >-
    **Code health can be impacted.** When reviews are slow, there is increased
        pressure to allow developers to submit CLs that are not as good as they
        could be. Slow reviews also discourage code cleanups, refactorings, and
        further improvements to existing CLs.
  ja: >-
    **コードの健康状態が悪い影響を受けます。**

    レビューが遅いと、最高の出来映えといえないような CL でもとにかく提出してしまってよいという雰囲気が開発者の間に広がります。

    また、レビューの遅れはコードをきれいにしたり、リファクタリングしたり、既存の CL をさらに改善したりする意欲をそぎます。
---
texts:
  en: How Fast Should Code Reviews Be? {#fast}
  ja: コードレビューはどれほど急ぐべきか？ {#fast}
---
texts:
  en: >-
    If you are not in the middle of a focused task, **you should do a code review

    shortly after it comes in.**
  ja: >-
    あるタスクに集中的に取り組んでいる最中でなければ、**コードレビューの依頼が来たらすぐに着手してください。**
---
texts:
  en: >-
    **One business day is the maximum time it should take to respond** to a code

    review request (i.e. first thing the next morning).
  ja: >-
    コードレビューのリクエストに返信するまでの**最長の時間は一営業日**です（つまり遅くとも翌朝一番に返信すべきです）。
---
texts:
  en: >-
    Following these guidelines means that a typical CL should get multiple rounds of

    review (if needed) within a single day.
  ja: >-
    このガイドラインに従うと、典型的な CL は（必要なら）一日以内に複数ラウンドに渡ってレビューが行われることになります。
---
texts:
  en: Speed vs. Interruption {#interruption}
  ja: スピード vs 割り込み {#interruption}
---
texts:
  en: >-
    There is one time where the consideration of personal velocity trumps team

    velocity. **If you are in the middle of a focused task, such as writing code,

    don't interrupt yourself to do a code review.** Research has shown that it can

    take a long time for a developer to get back into a smooth flow of development

    after being interrupted. So interrupting yourself while coding is actually

    _more_ expensive to the team than making another developer wait a bit for a code

    review.
  ja: >-
    チームの速度よりも個人の速度を尊重したほうが効率が良い場合があります。

    **コードを書くような集中的に取り組むべきタスク**の最中には、自分のタスクを中断してコードレビューしてはいけません。研究結果によれば、開発者が割り込み作業のあとでスムーズな開発フローに戻るには長い時間がかかることがあります。

    そのため、コーディングの最中に中断すると、他の開発者がコードレビューを多少待つよりも結果的に**余計な**コストがかかります。
---
texts:
  en: >-
    Instead, wait for a break point in your work before you respond to a request for

    review. This could be when your current coding task is completed, after lunch,

    returning from a meeting, coming back from the microkitchen, etc.
  ja: >-
    それよりは仕事のブレークポイントを待ってからレビューのリクエストに返信しましょう。

    たとえば今のコーディングが完了したときや、ランチの後や、ミーティングから帰ったとき、マイクロキッチンから戻ったときなどです。
---
texts:
  en: Fast Responses {#responses}
  ja: 素早い応答 {#responses}
---
texts:
  en: >-
    When we talk about the speed of code reviews, it is the _response_ time that we

    are concerned with, as opposed to how long it takes a CL to get through the

    whole review and be submitted. The whole process should also be fast, ideally,

    but **it's even more important for the _individual responses_ to come quickly

    than it is for the whole process to happen rapidly.**
  ja: >-
    コードレビューのスピードについて話すとき、私達の関心は**応答**時間の長さであり、レビュー全体が完了して提出されるまでの時間の長さではありません。

    理想的にはプロセス全体も短時間で行うべきですが、** _個々の応答_ を素早く行うことのほうが、プロセス全体を短時間で終えることよりも遥かに重要です。**
---
texts:
  en: >-
    Even if it sometimes takes a long time to get through the entire review

    _process_, having quick responses from the reviewer throughout the process

    significantly eases the frustration developers can feel with "slow" code

    reviews.
  ja: >-
    たとえレビュー全体の**プロセス**に長い時間がかかってもレビュアーから素早く応答がもらえていれば、開発者が「遅い」コードレビューに感じる不満を大きく軽減できます。
---
texts:
  en: >-
    If you are too busy to do a full review on a CL when it comes in, you can still

    send a quick response that lets the developer know when you will get to it,

    suggest other reviewers who might be able to respond more quickly, or

    [provide some initial broad comments](navigate.md). (Note: none of this means

    you should interrupt coding even to send a response like this
  ja: あなたが非常に忙しくて CL のレビュー依頼をされても十分な時間が取れない場合、それでも素早く応答することはできます。いつ着手できるかを開発者に伝えたり、もっと短時間で応答できる他のレビュアーを紹介したり、[広い観点で見た初期段階のコメントを残したり](navigate.md)できます。（注：そういった返信をするとしてもコーディングを中断するべきではありません。
---
texts:
  en: —
  ja: ""
---
texts:
  en: >-
    send the

    response at a reasonable break point in your work.)
  ja: 仕事中にちょうどいいブレークポイントを見つけて返信してください。）
---
texts:
  en: >-
    **It is important that reviewers spend enough time on review that they are

    certain their "LGTM" means "this code meets [our standards](standard.md)."**

    However, individual responses should still ideally be [fast](#fast).
  ja: "**レビュアーが十分な時間を取って、「LGTM」が個人の感想でなく「このコードは[私達の基準](standard.md)を満たしている」という意味だと言えるくらいにレビューするのは大切なことです。**同時に、理想的には個々の応答は[素早く](#fast)返信すべきです。"
---
texts:
  en: Cross-Time-Zone Reviews {#tz}
  ja: タイムゾーンをまたがるレビュー {#tz}
---
texts:
  en: >-
    When dealing with time zone differences, try to get back to the author when they

    are still in the office. If they have already gone home, then try to make sure

    your review is done before they get back to the office the next day.
  ja: タイムゾーンの違いを取り回すには、CL 作成者がいつオフィスに確実にいるかを確認するようにしてください。すでに家に帰ってしまったかもしれません。そのときには翌日に作成者がオフィスに戻る前にレビューを完了するように心がけてください。
---
texts:
  en: LGTM With Comments {#lgtm-with-comments}
  ja: コメント付きの LGTM {#lgtm-with-comments}
---
texts:
  en: >-
    In order to speed up code reviews, there are certain situations in which a

    reviewer should give LGTM/Approval even though they are also leaving unresolved

    comments on the CL. This is done when either:
  ja: コードレビューのスピードを上げるために、レビュアーが CL に未解決のコメントを残しつつも LGTM / 承認を与えるというケースがあります。これは次のいずれかに当てはまる場合にそうするべきです。
---
texts:
  en: >-
    The reviewer is confident that the developer will appropriately address all
        the reviewer's remaining comments.
  ja: 開発者がレビュアーの残したコメントに後で着実に取り組んでくれるとレビュアーが信頼できるとき
---
texts:
  en: >-
    The remaining changes are minor and don't _have_ to be done by the
        developer.
  ja: 先送りにした変更がさほど重要でなく、開発者本人が**必ずしも**行う必要のないとき
---
texts:
  en: >-
    The reviewer should specify which of these options they intend, if it is not

    otherwise clear.
  ja: これらのうちどちらがレビュアーの意図なのかをはっきりさせておかないと、曖昧な態度は開発者を混乱させます。
---
texts:
  en: >-
    LGTM With Comments is especially worth considering when the developer and

    reviewer are in different time zones and otherwise the developer would be

    waiting for a whole day just to get "LGTM, Approval."
  ja: コメント付きの LGTM が価値を発揮するのは、特に開発者とレビュアーが別々のタイムゾーンで仕事をしているときです。このやり方でレビューを進めないと、開発者は「LGTM / 承認」をもらうためだけに丸一日待たなければならなくなります。
---
texts:
  en: Large CLs {#large}
  ja: 大きな CL {#large}
---
texts:
  en: >-
    If somebody sends you a code review that is so large you're not sure when you

    will be able to have time to review it, your typical response should be to ask

    the developer to

    [split the CL into several smaller CLs](../developer/small-cls.md) that build on

    each other, instead of one huge CL that has to be reviewed all at once. This is

    usually possible and very helpful to reviewers, even if it takes additional work

    from the developer.
  ja: >-
    送られてきたコードレビューがあまりに巨大で、じっくりレビューする時間を取れるか不安なときには、開発者にその CL を[小さな CL に分割する](../developer/small-cls.md)よう依頼するのがよくある対応策です。

    一度にレビューするのが大変な一つの巨大な CL ではなく、それぞれが関連している小さな CL に分割するのです。

    これは開発者にとってみれば仕事が増えますが、普通の CL では不可能な作業でもなく、レビュアーにとっては非常に助かります。
---
texts:
  en: >-
    If a CL *can't* be broken up into smaller CLs, and you don't have time to review

    the entire thing quickly, then at least write some comments on the overall

    design of the CL and send it back to the developer for improvement. One of your

    goals as a reviewer should be to always unblock the developer or enable them to

    take some sort of further action quickly, without sacrificing code health to do

    so.
  ja: >-
    CL が小さな CL に分割**できない**場合、またさらにレビュアーがすぐにコード全体をレビューする時間が取れないとき、それでも少なくとも CL の全体的な設計に関してコメントを書き送り、開発者に改善を求めることができます。

    いつでも言えることですが、レビュアーとしてのゴールの一つは開発者を作業を滞らせないこと、あるいは次のアクションをすぐに起こせる状態にしておくことです。もちろんコードの健康状態を犠牲にしてはいけませんが。
---
texts:
  en: Code Review Improvements Over Time {#time}
  ja: __COPY__
---
texts:
  en: >-
    If you follow these guidelines and you are strict with your code reviews, you

    should find that the entire code review process tends to go faster and faster

    over time. Developers learn what is required for healthy code, and send you CLs

    that are great from the start, requiring less and less review time. Reviewers

    learn to respond quickly and not add unnecessary latency into the review

    process.

    But **don't compromise on

    the [code review standards](standard.md) or quality for an imagined improvement

    in velocity**
  ja: __COPY__
---
texts:
  en: —
  ja: __COPY__
---
texts:
  en: >-
    it's not actually going to make anything happen more

    quickly, in the long run.
  ja: __COPY__
---
texts:
  en: Emergencies
  ja: __COPY__
---
texts:
  en: >-
    There are also [emergencies](../emergencies.md) where CLs must pass through the

    _whole_ review process very quickly, and where the quality guidelines would be

    relaxed. However, please see [What Is An Emergency?](../emergencies.md#what) for

    a description of which situations actually qualify as emergencies and which

    don't.
  ja: __COPY__
---
texts:
  en: "Next: [How to Write Code Review Comments](comments.md)"
  ja: __COPY__
