texts:
  en: What to look for in a code review
  ja: コードレビューの観点
---
texts:
  en: >-
    Note: Always make sure to take into account

    [The Standard of Code Review](standard.md) when considering each of these

    points.
  ja: （注）以下のポイントを検討する際にはつねに[コードレビューの基準](standard.md)を忘れないでください。
---
texts:
  en: Design
  ja: 設計
---
texts:
  en: >-
    The most important thing to cover in a review is the overall design of the CL.

    Do the interactions of various pieces of code in the CL make sense? Does this

    change belong in your codebase, or in a library? Does it integrate well with the

    rest of your system? Is now a good time to add this functionality?
  ja: >-
    レビューで確認すべき最も大切なことは、CL の全体的な設計です。

    CL のコードの各部分は相互にきちんと連携するでしょうか？この変更はコードベースに属するものでしょうか、それともあるライブラリに属するものでしょうか？システムの他の部分とうまく統合するでしょうか？この機能を追加するタイミングは今がふさわしいでしょうか？
---
texts:
  en: Functionality
  ja: 機能性
---
texts:
  en: >-
    Does this CL do what the developer intended? Is what the developer intended good

    for the users of this code? The "users" are usually both end-users (when they

    are affected by the change) and developers (who will have to "use" this code in

    the future).
  ja: この CL は開発者の意図通りに動作しますか？開発者の意図はこのコードのユーザーにとって適切でしょうか？「ユーザー」とは普通、エンドユーザー（その変更によって影響を受ける場合）と開発者（将来このコードを「使う」必要のある人）の両方を指します。
---
texts:
  en: >-
    Mostly, we expect developers to test CLs well-enough that they work correctly by

    the time they get to code review. However, as the reviewer you should still be

    thinking about edge cases, looking for concurrency problems, trying to think

    like a user, and making sure that there are no bugs that you see just by reading

    the code.
  ja: >-
    通常、CL がコードレビューに至るまでには、コードが正しく動作することを開発者が十分にテストしていると期待できます。

    それでもレビュアーはエッジケースを想定する、並行処理の問題を探す、ユーザーになりきって考えるなど、コードを読むだけではわからない不具合がないかを確認してください。
---
texts:
  en: >-
    You *can* validate the CL if you want—the time when it's most important for a

    reviewer to check a CL's behavior is when it has a user-facing impact, such as a

    **UI change**. It's hard to understand how some changes will impact a user when

    you're just reading the code. For changes like that, you can have the developer

    give you a demo of the functionality if it's too inconvenient to patch in the CL

    and try it yourself.
  ja: >-
    必要に応じて CL を検証しても**構いません**。特に、**UI の変更**といった、ユーザーに影響する変更があるときには、レビュアーが CL の動作を確認するべき最も重要な機会です。

    変更がユーザーにどのような影響を与えるかはコードを読むだけではわかりにくいものです。

    そのような変更に対して、CL の変更を反映して自分で動作確認するのが難しければ、開発者にその機能のデモを依頼することもできます。
---
texts:
  en: >-
    Another time when it's particularly important to think about functionality

    during a code review is if there is some sort of **parallel programming** going

    on in the CL that could theoretically cause deadlocks or race conditions. These

    sorts of issues are very hard to detect by just running the code and usually

    need somebody (both the developer and the reviewer) to think through them

    carefully to be sure that problems aren't being introduced. (Note that this is

    also a good reason not to use concurrency models where race conditions or

    deadlocks are possible—it can make it very complex to do code reviews or

    understand the code.)
  ja: >-
    また別のケースですが、コードレビュー中に機能について熟慮が特に求められるのは、CL にある種の**並行プログラミング**が行われていて、理論的にデッドロックや競合状態を引き起こす可能性がある場合です。

    こういう問題はコードを実行するだけでは不具合の発見が難しいため、通常、コード全体を見て問題が発生していないことを注意深く確認する人（開発者とレビュアーの両方）が必要です。

    （なお、これこそがやはり、競合状態やデッドロックが発生しうるところで並行処理モデルを採用すべきでない十分な理由です。コードレビューを行うにしてもコードを理解するにしても非常に複雑になりうるからです。）
---
texts:
  en: Complexity
  ja: 複雑性
---
texts:
  en: >-
    Is the CL more complex than it should be? Check this at every level of the

    CL—are individual lines too complex? Are functions too complex? Are classes too

    complex? "Too complex" usually means **"can't be understood quickly by code

    readers."** It can also mean **"developers are likely to introduce bugs when

    they try to call or modify this code."**
  ja: >-
    CL が必要以上に複雑になっていないでしょうか？ CL のあらゆるレベルで確認してください。

    一行一行は複雑すぎないでしょうか？関数は複雑すぎないでしょうか？クラスは複雑すぎないでしょうか？

    「複雑すぎる」とは普通、**「コードを読んですぐに理解できない」**という意味です。

    あるいは、**「開発者がこのコードを呼び出したり修正したりしようとするときに不具合を生み出す可能性がある」**という意味でもあります。
---
texts:
  en: >-
    A particular type of complexity is **over-engineering**, where developers have

    made the code more generic than it needs to be, or added functionality that

    isn't presently needed by the system. Reviewers should be especially vigilant

    about over-engineering. Encourage developers to solve the problem they know

    needs to be solved *now*, not the problem that the developer speculates *might*

    need to be solved in the future. The future problem should be solved once it

    arrives and you can see its actual shape and requirements in the physical

    universe.
  ja: >-
    あるタイプの複雑性は、**オーバーエンジニアリング**です。開発者が必要以上にコードを一般化していたり、現在のシステムにとってまだ必要のない機能を盛り込んでいたりするということです。

    レビュアーはオーバーエンジニアリングを特に警戒すべきです。

    開発者には、**現在**解決する必要のある既知の問題に取り組むべきであって、将来解決する必要が出てくる**かもしれない**推測に基づいた問題には目を向けないよう勧めてください。

    将来の問題はそれが発生してから取り組めばよいのです。問題が発生すれば、この物理的な宇宙の中でその実際の形と要件を知ることができます。
---
texts:
  en: Tests
  ja: テスト
---
texts:
  en: >-
    Ask for unit, integration, or end-to-end

    tests as appropriate for the change. In general, tests should be added in the

    same CL as the production code unless the CL is handling an

    [emergency](../emergencies.md).
  ja: >-
    変更に適したユニットテスト、結合テスト、E2E テストを依頼してください。

    一般に、テストはプロダクションコードと同じ CL に追加してください。

    例外は、CL が[緊急事態](../emergencies.md)に対処している場合です。
---
texts:
  en: >-
    Make sure that the tests in the CL are correct, sensible, and useful. Tests do

    not test themselves, and we rarely write tests for our tests—a human must ensure

    that tests are valid.
  ja: >-
    CL の中のテストが正確で、適切で、有用であることを確認してください。

    テストがテストコード自体をテストすることはありませんし、テストのためのテストコードを書くこともめったにありません。テストの有効性は人間が確認しなければなりません。
---
texts:
  en: >-
    Will the tests actually fail when the code is broken? If the code changes

    beneath them, will they start producing false positives? Does each test make

    simple and useful assertions? Are the tests separated appropriately between

    different test methods?
  ja: >-
    コードが壊れているときにテストはきちんと失敗するでしょうか？

    そのテストの下でコードを変更すると、テストが誤検知を起こさないでしょうか？

    各テストはシンプルで有用なアサーションを使っているでしょうか？

    テストは異なるテストメソッドごとに適切に分割されているでしょうか？
---
texts:
  en: >-
    Remember that tests are also code that has to be maintained. Don't accept

    complexity in tests just because they aren't part of the main binary.
  ja: >-
    テストもまた保守すべきコードであることを覚えていてください。

    メインのバイナリに含まれないからといって、テストが複雑になるのを許容しないでください。
---
texts:
  en: Naming
  ja: 命名
---
texts:
  en: >-
    Did the developer pick good names for everything? A good name is long enough to

    fully communicate what the item is or does, without being so long that it

    becomes hard to read.
  ja: >-
    開発者はあらゆるものに適切な名前を与えているでしょうか？

    適切な名前とは、それが何であるか／何をするかを伝えるのに十分に長く、しかし読むのに困難を覚えないほど短いものです。
---
texts:
  en: Comments
  ja: コメント
---
texts:
  en: >-
    Did the developer write clear comments in understandable English? Are all of the

    comments actually necessary? Usually comments are useful when they **explain

    why** some code exists, and should not be explaining *what* some code is doing.

    If the code isn't clear enough to explain itself, then the code should be made

    simpler. There are some exceptions (regular expressions and complex algorithms

    often benefit greatly from comments that explain what they're doing, for

    example) but mostly comments are for information that the code itself can't

    possibly contain, like the reasoning behind a decision.
  ja: >-
    開発者はわかりやすい英語で明確なコメントを書きましたか？

    すべてのコメントは実際に必要でしょうか？

    コメントは普通、あるコードが**「なぜ」**存在するのかを説明するのに役立ちますが、コードが**「何」**をしているのかを説明すべきではありません。

    コードがそれ自身を説明するほど明確でないのなら、コードをもっとシンプルにすべきです。

    例外はあります（たとえば正規表現や複雑なアルゴリズムでは何をしているのかを説明するコメントは非常に有益です）が、ほとんどの場合、コメントは決定の背後にある理由といった、コード自体が語ることのできない情報を伝えるために書きます。
---
texts:
  en: >-
    It can also be helpful to look at comments that were there before this CL. Maybe

    there is a TODO that can be removed now, a comment advising against this change

    being made, etc.
  ja: >-
    CL の前にその箇所にあったコメントに注目するのが有益であることもあります。

    今となっては削除すべき TODO があるかもしれませんし、この変更を行うべきではないと助言するコメントなどがあるかもしれません。
---
texts:
  en: >-
    Note that comments are different from *documentation* of classes, modules, or

    functions, which should instead express the purpose of a piece of code, how it

    should be used, and how it behaves when used.
  ja: なお、コメントはクラス、モジュール、関数の**ドキュメンテーション**とは違います。ドキュメンテーションコメントはコードの目的や、使い方や、使われたときのふるまいを記述するものです。
---
texts:
  en: Style
  ja: スタイル
---
texts:
  en: >-
    We have [style guides](http://google.github.io/styleguide/) at Google for all

    of our major languages, and even for most of the minor languages. Make sure the

    CL follows the appropriate style guides.
  ja: >-
    Google には[スタイルガイド](http://google.github.io/styleguide/)があります。メジャーな言語に関してはすべて、マイナーな言語でも多くはスタイルガイドが揃っています。

    CL が適切なスタイルガイドを従っているかを確認してください。
---
texts:
  en: >-
    If you want to improve some style point that isn't in the style guide, prefix

    your comment with "Nit:" to let the developer know that it's a nitpick that you

    think would improve the code but isn't mandatory. Don't block CLs from being

    submitted based only on personal style preferences.
  ja: >-
    スタイルガイドに記載のないスタイルの改善をしたい場合、コメントに「Nit:」というプレフィックスを付けて、それが細かい指摘 (nitpick) であることを開発者に知らせるのがよいでしょう。そうすると、コードを修正してほしいが強制ではないということが伝わります。

    個人的なスタイルの好みで CL の提出をブロックしないでください。
---
texts:
  en: >-
    The author of the CL should not include major style changes combined with other

    changes. It makes it hard to see what is being changed in the CL, makes merges

    and rollbacks more complex, and causes other problems. For example, if the

    author wants to reformat the whole file, have them send you just the

    reformatting as one CL, and then send another CL with their functional changes

    after that.
  ja: >-
    CL の作成者はスタイル上の大きな変更を他の変更に混ぜないようにしてください。

    それをすると CL で何が変更されているのかを見るのが難しくなるばかりか、マージ後にロールバックするのはもっと大変ですし、さらに他の問題も引き起こします。

    たとえば、作成者がファイル全体を再フォーマットしたいと思ったら、再フォーマットだけを一つの CL として提出し、その後で機能的な変更を別の CL として提出するようにしてください。
---
texts:
  en: Documentation
  ja: ドキュメンテーション
---
texts:
  en: >-
    If a CL changes how users build, test, interact with, or release code, check to

    see that it also updates associated documentation, including

    READMEs, g3doc pages, and any generated

    reference docs. If the CL deletes or deprecates code, consider whether the

    documentation should also be deleted.

    If documentation is

    missing, ask for it.
  ja: >-
    CL がコードのビルド、テスト、相互連携、リリースのやり方を変更する場合、それに関連するドキュメンテーションも更新しているかを確認してください。

    関連するドキュメンテーションには、README、g3doc ページ、自動生成されたリファレンスドキュメントなどがあります。

    CL がコードを削除あるいは非推奨にしたら、ドキュメンテーションも削除するべきかどうか検討してください。

    ドキュメンテーションが存在しなければ、作成するように依頼してください。
---
texts:
  en: Every Line {#every_line}
  ja: 一行ずつ {#every_line}
---
texts:
  en: >-
    Look at *every* line of code that you have been assigned to review. Some things

    like data files, generated code, or large data structures you can scan over

    sometimes, but don't scan over a human-written class, function, or block of code

    and assume that what's inside of it is okay. Obviously some code deserves more

    careful scrutiny than other code
  ja: >-
    レビューをアサインされたらコードを**一行ずつ**見てください。

    データファイル、自動生成されたコード、巨大なデータ構造などはざっと見れば済むこともありますが、人間の書いたクラス、関数、コードブロックなどはそうもいきません。

    コードの中に書かれているものが正しいと決めてかからず、じっくり読んでください。

    明らかに他のコードよりも精密に調べるに値するコードもあります
---
texts:
  en: —
  ja: __COPY__
---
texts:
  en: >-
    that's a judgment call that you have to

    make
  ja: そうすべきかどうかはレビュアーが自分で判断しなければなりません
---
texts:
  en: —
  ja: __COPY__
---
texts:
  en: >-
    but you should at least be sure that you *understand* what all the

    code is doing.
  ja: が、少なくとも全コードが何をしているかを確実に**理解**するようにしてください。
---
texts:
  en: >-
    If it's too hard for you to read the code and this is slowing down the review,

    then you should let the developer know that

    and wait for them to clarify it before you try to review it. At Google, we hire

    great software engineers, and you are one of them. If you can't understand the

    code, it's very likely that other developers won't either. So you're also

    helping future developers understand this code, when you ask the developer to

    clarify it.
  ja: >-
    コードが読みにくく、そのことがレビューを遅らせているなら、レビューをいったん置いて開発者に知らせ、コードを明確にしてくれるのを待ちましょう。

    Google には優秀なソフトウェアエンジニアが雇われていますし、あなたはその一人です。

    あなたがコードを理解できないのなら、他の開発者もきっと理解できません。

    ですから、開発者にコードを明確にするよう依頼するのは、未来の開発者のためにこのコードを理解しやすくする手助けでもあります。
---
texts:
  en: >-
    If you understand the code but you don't feel qualified to do some part of the

    review, make sure there is a reviewer on the CL who is qualified, particularly

    for complex issues such as security, concurrency, accessibility,

    internationalization, etc.
  ja: >-
    コードを理解できてもレビューのある部分で自分にはレビューする資格がないと感じる場合、その CL について他に適切なレビュアーがいることを忘れないでください。

    特に、セキュリティ、並行処理、アクセシビリティ、インターナショナライゼーションといった複雑な問題に関しては適任者がいます。
---
texts:
  en: Context
  ja: コンテキスト
---
texts:
  en: >-
    It is often helpful to look at the CL in a broad context. Usually the code

    review tool will only show you a few lines of code around the parts that are

    being changed. Sometimes you have to look at the whole file to be sure that the

    change actually makes sense. For example, you might see only four new lines

    being added, but when you look at the whole file, you see those four lines are

    in a 50-line method that now really needs to be broken up into smaller methods.
  ja: >-
    CL を広いコンテキストの中に置いて眺めると有意義なことがよくあります。

    普通コードレビューツールは変更のあった箇所の周りを数行ほど表示するだけです。

    変更がうまく機能することを確認するためにファイル全体を見なければならないときもあります。

    たとえば、追加された行が 4 行だけだったとしても、ファイル全体を眺めたらそれが 50 行に及ぶメソッドの中に書かれていることがわかり、メソッドを分割する必要があると判明することもあります。
---
texts:
  en: >-
    It's also useful to think about the CL in the context of the system as a whole.

    Is this CL improving the code health of the system or is it making the whole

    system more complex, less tested, etc.? **Don't accept CLs that degrade the code

    health of the system.** Most systems become complex through many small changes

    that add up, so it's important to prevent even small complexities in new

    changes.
  ja: >-
    CL をシステム全体のコンテキストの中に置いて考えてみることも有益です。

    この CL はシステムのコードの健康状態を改善しているでしょうか、それともシステム全体を複雑にし、テスト不足な状態にしているでしょうか？

    **コードの健康状態を悪化させる CL を受け入れないでください。**

    ほとんどのシステムは小さな変更が積み重なってだんだんと複雑化します。

    だからこそ、新たな変更があったときに小さな複雑性でも混入させないようにするのが大切です。
---
texts:
  en: Good Things {#good_things}
  ja: 良いこと {#good_things}
---
texts:
  en: >-
    If you see something nice in the CL, tell the developer, especially when they

    addressed one of your comments in a great way. Code reviews often just focus on

    mistakes, but they should offer encouragement and appreciation for good

    practices, as well. It’s sometimes even more valuable, in terms of mentoring, to

    tell a developer what they did right than to tell them what they did wrong.
  ja: >-
    CL の中に素晴らしいものを見つけたら、開発者に教えてあげてください。特に、あなたのレビューコメントの一つに取り組んで素晴らしくやり遂げたらそうしてください。

    コードレビューは間違いにばかり目が行きがちですが、良い実践に対しての励ましや感謝の言葉も伝えるべきです。

    メンタリングの観点では、開発者が正しいこと行ったときにそれを伝えるほうが、間違いを指摘するよりもずっと価値がある場合があります。
---
texts:
  en: Summary
  ja: 要約
---
texts:
  en: "In doing a code review, you should make sure that:"
  ja: コードレビューをする際には、次のことを確認してください。
---
texts:
  en: The code is well-designed.
  ja: コードがうまく設計されている
---
texts:
  en: The functionality is good for the users of the code.
  ja: 機能性がコードのユーザーにとって適切である
---
texts:
  en: Any UI changes are sensible and look good.
  ja: UI の変更がある場合、よく考えられていて見た目も適切である
---
texts:
  en: Any parallel programming is done safely.
  ja: 並行処理がある場合、安全に行われている
---
texts:
  en: The code isn't more complex than it needs to be.
  ja: コードが必要以上に複雑でない
---
texts:
  en: >-
    The developer isn't implementing things they *might* need in the future but
        don't know they need now.
  ja: 開発者は将来必要になる**かもしれない**ものではなく、現在必要だとわかっているものを実装している
---
texts:
  en: Code has appropriate unit tests.
  ja: コードには適切なユニットテストがある
---
texts:
  en: Tests are well-designed.
  ja: テストがうまく設計されている
---
texts:
  en: The developer used clear names for everything.
  ja: 開発者はあらゆるものに明確な名前を使った
---
texts:
  en: Comments are clear and useful, and mostly explain *why* instead of *what*.
  ja: コメントは明確で有意義なもので、**「何」**ではなく**「なぜ」**を説明している
---
texts:
  en: Code is appropriately documented (generally in g3doc).
  ja: コードは適切にドキュメント化されている（一般的には g3doc で）
---
texts:
  en: The code conforms to our style guides.
  ja: コードはスタイルガイドに準拠している
---
texts:
  en: >-
    Make sure to review **every line** of code you've been asked to review, look at

    the **context**, make sure you're **improving code health**, and compliment

    developers on **good things** that they do.
  ja: レビューを依頼されたコードを**一行ずつ**レビューすること、**コンテキスト**を確認すること、**コードの健康状態を改善**しているかを見極めること、開発者が**良いこと**をしたらそれを褒めることを忘れずに。
---
texts:
  en: "Next: [Navigating a CL in Review](navigate.md)"
  ja: "次: [レビューで CL を閲覧する](navigate.md)"
